{"version":3,"file":"static/js/283.35a1df05.chunk.js","mappings":"iNAUA,MAAMA,EAAU,CACZ,CAAEC,GAAI,OAAQC,MAAO,OAAQC,SAAU,KACvC,CAAEF,GAAI,OAAQC,MAAO,cAAiBC,SAAU,KAChD,CACIF,GAAI,aACJC,MAAO,aACPC,SAAU,IACVC,MAAO,QACPC,OAASC,GAAUA,EAAMC,eAAe,UAE5C,CACIN,GAAI,OACJC,MAAO,mBACPC,SAAU,IACVC,MAAO,QACPC,OAASC,GAAUA,EAAMC,eAAe,UAE5C,CACIN,GAAI,UACJC,MAAO,UACPC,SAAU,IACVC,MAAO,QACPC,OAASC,GAAUA,EAAME,QAAQ,KAIzC,SAASC,EAAWC,EAAMC,EAAMC,EAAYC,GAExC,MAAO,CAAEH,OAAMC,OAAMC,aAAYC,OAAMC,QADvBF,EAAaC,EAEjC,CAEA,MAAME,EAAO,CACTN,EAAW,QAAS,KAAM,WAAY,SACtCA,EAAW,QAAS,KAAM,WAAY,SACtCA,EAAW,QAAS,KAAM,SAAU,QACpCA,EAAW,gBAAiB,KAAM,UAAW,SAC7CA,EAAW,SAAU,KAAM,SAAU,SACrCA,EAAW,YAAa,KAAM,SAAU,SACxCA,EAAW,UAAW,KAAM,SAAU,QACtCA,EAAW,UAAW,KAAM,OAAS,OACrCA,EAAW,SAAU,KAAM,UAAW,SACtCA,EAAW,QAAS,KAAM,SAAW,QACrCA,EAAW,SAAU,KAAM,QAAU,QACrCA,EAAW,iBAAkB,KAAM,SAAU,QAC7CA,EAAW,SAAU,KAAM,UAAW,UACtCA,EAAW,UAAW,KAAM,UAAW,QACvCA,EAAW,SAAU,KAAM,UAAW,UAmE1C,UAhEe,KACX,MAAOO,EAAMC,GAAWC,EAAAA,SAAe,IAChCC,EAAaC,GAAkBF,EAAAA,SAAe,IAWrD,OACI,UAAC,IAAK,CAACG,GAAI,CAAEC,MAAO,QAAS,WACzB,SAAC,IAAc,CAACD,GAAI,CAAEE,UAAW,KAAM,UACnC,UAAC,IAAK,CAACC,cAAY,EAAC,aAAW,eAAc,WACzC,UAAC,IAAS,YACN,UAAC,IAAQ,YACL,SAAC,IAAS,CAACpB,MAAM,SAASqB,QAAS,EAAE,SAAC,aAGtC,SAAC,IAAS,CAACrB,MAAM,SAASqB,QAAS,EAAE,SAAC,gBAI1C,SAAC,IAAQ,UACJzB,EAAQ0B,KAAKC,IACV,SAAC,IAAS,CAAiBvB,MAAOuB,EAAOvB,MAAOwB,MAAO,CAAEC,IAAK,GAAI1B,SAAUwB,EAAOxB,UAAW,SACzFwB,EAAOzB,OADIyB,EAAO1B,YAMnC,SAAC,IAAS,UACLc,EAAKe,MAAMd,EAAOG,EAAaH,EAAOG,EAAcA,GAAaO,KAAKK,IAE/D,SAAC,IAAQ,CAACC,OAAK,EAACC,KAAK,WAAWC,UAAW,EAAE,SACxClC,EAAQ0B,KAAKC,IACV,MAAMrB,EAAQyB,EAAIJ,EAAO1B,IACzB,OACI,SAAC,IAAS,CAAiBG,MAAOuB,EAAOvB,MAAM,SAC1CuB,EAAOtB,QAA2B,kBAAVC,EAAqBqB,EAAOtB,OAAOC,GAASA,GADzDqB,EAAO1B,GAEX,KAN2B8B,EAAIpB,gBAe3E,SAAC,IAAe,CACZwB,mBAAoB,CAAC,GAAI,GAAI,KAC7BC,UAAU,MACVC,MAAOtB,EAAKuB,OACZnB,YAAaA,EACbH,KAAMA,EACNuB,aAtDa,CAACC,EAAOC,KAC7BxB,EAAQwB,EAAQ,EAsDRC,oBAnDqBF,IAC7BpB,GAAgBoB,EAAMG,OAAOrC,OAC7BW,EAAQ,EAAE,MAmDF,C","sources":["views/utilities/Tables.js"],"sourcesContent":["import * as React from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nconst columns = [\r\n    { id: 'name', label: 'Name', minWidth: 170 },\r\n    { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\r\n    {\r\n        id: 'population',\r\n        label: 'Population',\r\n        minWidth: 170,\r\n        align: 'right',\r\n        format: (value) => value.toLocaleString('en-US')\r\n    },\r\n    {\r\n        id: 'size',\r\n        label: 'Size\\u00a0(km\\u00b2)',\r\n        minWidth: 170,\r\n        align: 'right',\r\n        format: (value) => value.toLocaleString('en-US')\r\n    },\r\n    {\r\n        id: 'density',\r\n        label: 'Density',\r\n        minWidth: 170,\r\n        align: 'right',\r\n        format: (value) => value.toFixed(2)\r\n    }\r\n];\r\n\r\nfunction createData(name, code, population, size) {\r\n    const density = population / size;\r\n    return { name, code, population, size, density };\r\n}\r\n\r\nconst rows = [\r\n    createData('India', 'IN', 1324171354, 3287263),\r\n    createData('China', 'CN', 1403500365, 9596961),\r\n    createData('Italy', 'IT', 60483973, 301340),\r\n    createData('United States', 'US', 327167434, 9833520),\r\n    createData('Canada', 'CA', 37602103, 9984670),\r\n    createData('Australia', 'AU', 25475400, 7692024),\r\n    createData('Germany', 'DE', 83019200, 357578),\r\n    createData('Ireland', 'IE', 4857000, 70273),\r\n    createData('Mexico', 'MX', 126577691, 1972550),\r\n    createData('Japan', 'JP', 126317000, 377973),\r\n    createData('France', 'FR', 67022000, 640679),\r\n    createData('United Kingdom', 'GB', 67545757, 242495),\r\n    createData('Russia', 'RU', 146793744, 17098246),\r\n    createData('Nigeria', 'NG', 200962417, 923768),\r\n    createData('Brazil', 'BR', 210147125, 8515767)\r\n];\r\n\r\nconst Tables = () => {\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <Paper sx={{ width: '100%' }}>\r\n            <TableContainer sx={{ maxHeight: 440 }}>\r\n                <Table stickyHeader aria-label=\"sticky table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\" colSpan={2}>\r\n                                Country\r\n                            </TableCell>\r\n                            <TableCell align=\"center\" colSpan={3}>\r\n                                Details\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            {columns.map((column) => (\r\n                                <TableCell key={column.id} align={column.align} style={{ top: 57, minWidth: column.minWidth }}>\r\n                                    {column.label}\r\n                                </TableCell>\r\n                            ))}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                            return (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                    {columns.map((column) => {\r\n                                        const value = row[column.id];\r\n                                        return (\r\n                                            <TableCell key={column.id} align={column.align}>\r\n                                                {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                            </TableCell>\r\n                                        );\r\n                                    })}\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <TablePagination\r\n                rowsPerPageOptions={[10, 25, 100]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n        </Paper>\r\n    );\r\n};\r\nexport default Tables;\r\n"],"names":["columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","createData","name","code","population","size","density","rows","page","setPage","React","rowsPerPage","setRowsPerPage","sx","width","maxHeight","stickyHeader","colSpan","map","column","style","top","slice","row","hover","role","tabIndex","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target"],"sourceRoot":""}